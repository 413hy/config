#!/usr/bin/env bash
# unlock-all.sh
# 作用：尽量将常见“限制”解除并使之永久生效（高风险）
# 强烈警告：仅在测试/可恢复环境下运行（虚拟机/快照）
# 作者：ChatGPT (GPT-5)
set -euo pipefail

# -----------------------
# 配色输出
color() { printf "\e[%sm%s\e[0m\n" "$1" "$2"; }
info()  { color "36" "[INFO] $1"; }
warn()  { color "33" "[WARN] $1"; }
err()   { color "31" "[ERROR] $1"; }

# -----------------------
# 基本校验
if [ "$EUID" -ne 0 ]; then
  err "请以 root/使用 sudo 运行此脚本。"
  exit 1
fi

info "本脚本会进行很多高风险操作：关闭安全模块、停止防火墙、移除配额、提升用户权限、放宽限制等。"
warn "请确保已在快照/备份/测试环境中执行。继续前会自动备份被修改的配置文件。"

read -p "我已确认在测试环境并接受风险，继续执行？ (y/N): " CONF
if [ "$CONF" != "y" ] && [ "$CONF" != "Y" ]; then
  info "已取消。"
  exit 0
fi

# -----------------------
timestamp() { date +%Y%m%d-%H%M%S; }
backup_file() {
  local f="$1"
  if [ -e "$f" ]; then
    local bak="${f}.bak.$(timestamp)"
    cp -a "$f" "$bak"
    info "备份 $f -> $bak"
  fi
}

# 发行版检测
. /etc/os-release 2>/dev/null || true
DISTRO="${ID:-unknown}"
info "检测到发行版: ${PRETTY_NAME:-$DISTRO}"

# -----------------------
# 1) 解除只读挂载并修改 /etc/fstab 确保 rw
info "1) 解除只读挂载并尝试持久化 /etc/fstab"
# 立即 remount 根为 rw（如果可能）
if mount | grep ' on / ' | grep -q 'ro,'; then
  warn "根分区当前为只读，尝试重新挂载为读写..."
  mount -o remount,rw / || warn "无法重新挂载 / 为读写（可能在 initramfs 或特殊环境）"
else
  info "根分区不是只读，无需 remount"
fi

# 修改 fstab：把 / 的 ro 改为 rw（谨慎修改）
FSTAB="/etc/fstab"
backup_file "$FSTAB"
if grep -q '^[^#].*\s/\s.*ro' "$FSTAB"; then
  warn "在 fstab 中检测到 / 的 ro 挂载项，正在替换为 rw（备份已创建）"
  sed -E -i.bak."$(timestamp)" 's/(\s\/\s[^\n]*\s)ro(\s|$)/\1rw\2/g' "$FSTAB" || true
else
  info "fstab 中未检测到 / 的 ro 挂载项"
fi

# -----------------------
# 2) 关闭并永久禁用 SELinux（如果存在）
if command -v getenforce >/dev/null 2>&1; then
  info "2) SELinux 相关操作：临时关闭并尝试写入配置以永久关闭"
  if getenforce 2>/dev/null | grep -qi 'Enforcing'; then
    setenforce 0 || warn "setenforce 失败（可能已被限制）"
    info "已临时将 SELinux 设为 Permissive"
  else
    info "SELinux 非 Enforcing"
  fi
  SELINUX_CONF="/etc/selinux/config"
  if [ -f "$SELINUX_CONF" ]; then
    backup_file "$SELINUX_CONF"
    # 将 SELINUX= 改为 disabled
    sed -i.bak."$(timestamp)" -E 's/^[[:space:]]*SELINUX=.*/SELINUX=disabled/' "$SELINUX_CONF" || true
    info "已修改 $SELINUX_CONF 为 SELINUX=disabled（重启后生效）"
  fi
else
  info "系统未检测到 SELinux 工具，跳过 SELinux 步骤"
fi

# -----------------------
# 3) 关闭并永久禁用 AppArmor（Debian/Ubuntu 家族）
if command -v aa-status >/dev/null 2>&1 || systemctl list-units --type=service | grep -q apparmor; then
  info "3) AppArmor 相关操作：停止并禁用"
  backup_file "/etc/apparmor"
  systemctl stop apparmor.service 2>/dev/null || true
  systemctl disable apparmor.service 2>/dev/null || true
  systemctl mask apparmor.service 2>/dev/null || true
  info "已停止/禁用/屏蔽 AppArmor（如果存在）"
fi

# -----------------------
# 4) 关闭防火墙服务（firewalld / ufw）并 mask
info "4) 停止并禁用防火墙（firewalld / ufw / nftables-legacy）"
if systemctl list-units --type=service | grep -q firewalld; then
  systemctl stop firewalld || true
  systemctl disable firewalld || true
  systemctl mask firewalld || true
  info "firewalld 已停止/禁用/屏蔽"
fi
if systemctl list-units --type=service | grep -q ufw; then
  systemctl stop ufw || true
  systemctl disable ufw || true
  systemctl mask ufw || true
  info "ufw 已停止/禁用/屏蔽"
fi
# 尝试停止 nftables/iptables 服务
if systemctl list-units --type=service | grep -q nftables; then
  systemctl stop nftables || true
  systemctl disable nftables || true
  systemctl mask nftables || true
  info "nftables 已停止/禁用/屏蔽"
fi

# -----------------------
# 5) 解除磁盘配额并移除 fstab 中 quota 标记
info "5) 关闭磁盘配额（如果存在）并移除 fstab 中的 usrquota/grpquota 标记"
if command -v quotaoff >/dev/null 2>&1; then
  # 尝试对所有已挂载的 ext4/xfs/btrfs 文件系统关闭配额
  for m in $(mount | awk '/\s(ext4|xfs|btrfs)\s/ {print $3}'); do
    quotaoff -a 2>/dev/null || true
  done
fi
# 修改 fstab：移除 usrquota 和 grpquota
if [ -f "$FSTAB" ]; then
  backup_file "$FSTAB"
  sed -E -i.bak."$(timestamp)" 's/,?usrquota,?|,?grpquota,?//g' "$FSTAB" || true
  info "已尝试从 $FSTAB 中移除 usrquota/grpquota 标记（备份已创建）"
fi
# 删除配额文件（如果存在）
for qf in /aquota.* /quota.* /usrquota.*; do
  # 忽略找不到匹配的文件的错误
  [ -e "$qf" ] || continue
  backup_file "$qf"
  rm -f "$qf" 2>/dev/null || true
  info "已删除配额文件 $qf（备份已创建）"
done

# -----------------------
# 6) 放宽 ulimit（当前会话 & 永久 systemd + PAM）
info "6) 放宽 ulimit：当前生效 + 写入永久配置 (limits.d + systemd conf)"
# 立即对当前 shell 生效
ulimit -n 65535 || warn "设置当前进程 open files 限制失败"
ulimit -u 65535 || warn "设置当前进程 max user processes 失败"
ulimit -c unlimited || true

# 永久：/etc/security/limits.d/99-unlimit.conf
LIMITS_CONF="/etc/security/limits.d/99-unlimit.conf"
backup_file "$LIMITS_CONF"
cat > "$LIMITS_CONF" <<'EOF'
*               soft    nofile          65535
*               hard    nofile          65535
*               soft    nproc           65535
*               hard    nproc           65535
*               soft    core            unlimited
*               hard    core            unlimited
EOF
info "已写入 $LIMITS_CONF（PAM 登录时生效，重登录后生效）"

# systemd 服务限制（/etc/systemd/system.conf 和 user.conf）
SYS_CONF="/etc/systemd/system.conf"
USR_CONF="/etc/systemd/user.conf"
backup_file "$SYS_CONF"
backup_file "$USR_CONF"
sed -i.bak."$(timestamp)" -E 's/^#?DefaultLimitNOFILE=.*$/DefaultLimitNOFILE=65535/' "$SYS_CONF" || echo "DefaultLimitNOFILE=65535" >> "$SYS_CONF"
sed -i.bak."$(timestamp)" -E 's/^#?DefaultLimitNPROC=.*$/DefaultLimitNPROC=65535/' "$SYS_CONF" || echo "DefaultLimitNPROC=65535" >> "$SYS_CONF"
sed -i.bak."$(timestamp)" -E 's/^#?DefaultLimitCORE=.*$/DefaultLimitCORE=infinity/' "$SYS_CONF" || echo "DefaultLimitCORE=infinity" >> "$SYS_CONF"

sed -i.bak."$(timestamp)" -E 's/^#?DefaultLimitNOFILE=.*$/DefaultLimitNOFILE=65535/' "$USR_CONF" || echo "DefaultLimitNOFILE=65535" >> "$USR_CONF"
sed -i.bak."$(timestamp)" -E 's/^#?DefaultLimitNPROC=.*$/DefaultLimitNPROC=65535/' "$USR_CONF" || echo "DefaultLimitNPROC=65535" >> "$USR_CONF"
sed -i.bak."$(timestamp)" -E 's/^#?DefaultLimitCORE=.*$/DefaultLimitCORE=infinity/' "$USR_CONF" || echo "DefaultLimitCORE=infinity" >> "$USR_CONF"

info "已更新 systemd 配置文件。要使 systemd 启动的服务使用新限制，需要刷新 systemd（下面会询问）"

# -----------------------
# 7) 提升指定用户 sudo 权限（非破坏性：加入 sudo/wheel 组）
info "7) 提升用户 sudo 权限（将用户加入 sudo/wheel）。"
read -p "要提升哪个用户？（默认当前 SSH/TTY 用户: $SUDO_USER，若为空请输入用户名）: " TARGET_USER
TARGET_USER="${TARGET_USER:-${SUDO_USER:-root}}"
if id "$TARGET_USER" >/dev/null 2>&1; then
  # 根据发行版选择常用管理员组
  if getent group sudo >/dev/null 2>&1; then
    usermod -aG sudo "$TARGET_USER" || warn "usermod 添加到 sudo 组失败"
    info "已将 $TARGET_USER 添加到 sudo 组（需要重新登录会话生效）"
  elif getent group wheel >/dev/null 2>&1; then
    usermod -aG wheel "$TARGET_USER" || warn "usermod 添加到 wheel 组失败"
    info "已将 $TARGET_USER 添加到 wheel 组（需要重新登录会话生效）"
  else
    warn "未检测到 sudo/wheel 组，跳过自动加入"
  fi

  # 询问是否添加无密码 sudo（NOPASSWD）——非常危险，默认否
  read -p "是否为该组启用 NOPASSWD（允许无需密码使用 sudo）？ (y/N): " NOPW
  if [[ "$NOPW" =~ ^[Yy]$ ]]; then
    SUDOERS_D="/etc/sudoers.d"
    mkdir -p "$SUDOERS_D"
    backup_file "${SUDOERS_D}/99-${TARGET_USER}-nopasswd"
    echo "%sudo ALL=(ALL) NOPASSWD:ALL" > "${SUDOERS_D}/99-${TARGET_USER}-nopasswd"
    chmod 0440 "${SUDOERS_D}/99-${TARGET_USER}-nopasswd"
    info "已为 sudo 组启用 NOPASSWD（请谨慎）"
  fi
else
  warn "用户 $TARGET_USER 不存在，跳过用户提升"
fi

# -----------------------
# 8) 尝试移除文件/目录上的不可变属性（chattr +i）
info "8) 解除常见不可变属性（chattr -i）"
if command -v chattr >/dev/null 2>&1; then
  for p in /etc/passwd /etc/shadow /etc/sudoers /etc/ssh/sshd_config; do
    if [ -e "$p" ]; then
      chattr -i "$p" 2>/dev/null || true
      info "尝试对 $p 取消不可变标记"
    fi
  done
else
  info "系统无 chattr 命令，跳过 chattr 操作"
fi

# -----------------------
# 9) 可选：让 systemd 重新加载并 re-exec（会短暂中断服务）
info "9) 可选：立即使 systemd 层面的限制修改（systemd 配置）生效。"
warn "执行 systemctl daemon-reexec 将使 PID 1 重新执行 systemd 进程，可能会短暂中断服务。"
read -p "是否现在执行 systemctl daemon-reload 并询问是否执行 daemon-reexec？ (y/N): " DO_SYSTEMD
if [[ "$DO_SYSTEMD" =~ ^[Yy]$ ]]; then
  systemctl daemon-reload || warn "daemon-reload 失败"
  read -p "是否现在执行 systemctl daemon-reexec（会短暂中断服务）？ (y/N): " REEXEC
  if [[ "$REEXEC" =~ ^[Yy]$ ]]; then
    info "执行 systemctl daemon-reexec（重启 systemd 进程）——注意：这可能会重启所有 systemd 管理的服务"
    systemctl daemon-reexec || warn "daemon-reexec 失败"
  else
    info "已跳过 daemon-reexec；服务将在重启或下次重载时使用新设置"
  fi
else
  info "已跳过 systemd reload/reexec，请在方便时手动执行：systemctl daemon-reload && systemctl daemon-reexec"
fi

# -----------------------
# 10) 清理与提示
info "10) 清理与总结"
echo
info "脚本已尽力完成以下操作（如可用）："
cat <<EOF
- 尝试将根分区重新挂载为可写并修改 /etc/fstab（若检测到 ro）
- 临时关闭并尝试永久禁用 SELinux（若存在）
- 停止并禁用 (mask) AppArmor（若存在）
- 停止并禁用 firewalld/ufw/nftables（若存在）
- 关闭磁盘配额并移除 fstab 中的 quota 标记
- 设置当前 shell 的 ulimit 并写入 /etc/security/limits.d/99-unlimit.conf
- 修改 systemd 的默认限制配置（/etc/systemd/*.conf）
- 将指定用户加入 sudo/wheel（可选启用 NOPASSWD）
- 尝试取消常见文件的不可变属性 (chattr -i)
EOF

warn "重要提示："
cat <<EOF
- 部分永久配置（例如 SELINUX=disabled）需要重启后才完全生效。
- 对于 systemd 管理的服务，若未执行 daemon-reexec 或重启，可能仍使用旧限制。
- 你应检查并验证关键服务（ssh、数据库、web等）是否按预期运行。
- 强烈建议在做出这些更改后立即从控制台或有现场访问的方式验证系统（不要只依赖 SSH）以防被锁出。
EOF

info "已完成。请查看备份的配置文件（*.bak.*）并根据需要还原。"

# 显示关键状态供快速核验
echo
info "当前 SELinux 状态（若命令存在）："
command -v getenforce >/dev/null 2>&1 && getenforce || echo "getenforce not found"

info "AppArmor 状态（若存在）："
command -v aa-status >/dev/null 2>&1 && aa-status || systemctl status apparmor.service 2>/dev/null || echo "AppArmor not present"

info "防火墙服务状态（firewalld/ufw/nftables）："
systemctl is-active --quiet firewalld && echo "firewalld active" || echo "firewalld inactive"
systemctl is-active --quiet ufw && echo "ufw active" || echo "ufw inactive"
systemctl is-active --quiet nftables && echo "nftables active" || echo "nftables inactive"

info "ulimit (当前 shell):"
ulimit -n || true
ulimit -u || true

info "建议：在确认一切正常后，执行 reboot 以确保所有永久配置完全生效（根据你的风险承受策略决定是否重启）。"

exit 0
